//C Module (customer_service.c)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>
#include <cjson/cJSON.h>

#define API_KEY "your_api_key_here"
#define API_URL "https://api.openai.com/v1/engines/davinci-codex/completions"

// Structure to handle HTTP response
struct string {
    char *ptr;
    size_t len;
};

// Initialize the string structure
void init_string(struct string *s) {
    s->len = 0;
    s->ptr = malloc(s->len + 1);
    if (s->ptr == NULL) {
        fprintf(stderr, "malloc() failed\n");
        exit(EXIT_FAILURE);
    }
    s->ptr[0] = '\0';
}

// Callback function to handle data received from the server
size_t writefunc(void *ptr, size_t size, size_t nmemb, struct string *s) {
    size_t new_len = s->len + size * nmemb;
    s->ptr = realloc(s->ptr, new_len + 1);
    if (s->ptr == NULL) {
        fprintf(stderr, "realloc() failed\n");
        exit(EXIT_FAILURE);
    }
    memcpy(s->ptr + s->len, ptr, size * nmemb);
    s->ptr[new_len] = '\0';
    s->len = new_len;

    return size * nmemb;
}

// Function to make a POST request to the NLP service
char* make_request(const char *query) {
    CURL *curl;
    CURLcode res;
    struct string s;
    init_string(&s);

    curl = curl_easy_init();
    if(curl) {
        struct curl_slist *headers = NULL;
        headers = curl_slist_append(headers, "Content-Type: application/json");
        headers = curl_slist_append(headers, "Authorization: Bearer " API_KEY);

        cJSON *json = cJSON_CreateObject();
        cJSON_AddStringToObject(json, "prompt", query);
        cJSON_AddNumberToObject(json, "max_tokens", 50);
        char *post_data = cJSON_Print(json);

        curl_easy_setopt(curl, CURLOPT_URL, API_URL);
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, post_data);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writefunc);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &s);

        res = curl_easy_perform(curl);
        if(res != CURLE_OK)
            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));

        curl_easy_cleanup(curl);
        curl_slist_free_all(headers);
        cJSON_Delete(json);
        free(post_data);
    }
    return s.ptr;
}


//Header File (customer_service.h)
#ifndef CUSTOMER_SERVICE_H
#define CUSTOMER_SERVICE_H

// Function to handle customer inquiry using NLP service
char* handle_customer_inquiry(const char *inquiry);

#endif /* CUSTOMER_SERVICE_H */

//Explanation:
//Module Implementation (customer_service.c):

//Contains all the functions and necessary headers to handle customer inquiries using an NLP service.
//Uses libcurl for HTTP requests and cJSON for JSON parsing.
//The make_request function sends an inquiry to the NLP service and returns the response.
//Header File (customer_service.h):

//Declares the function handle_customer_inquiry which will be used to handle customer inquiries.



//Using the Module in Another Program
//To use this module in another C program (main.c), follow these steps:

//Example Usage (main.c)

#include <stdio.h>
#include "customer_service.h"

int main() {
    char inquiry[256];
    printf("Enter your inquiry: ");
    fgets(inquiry, sizeof(inquiry), stdin);
    inquiry[strcspn(inquiry, "\n")] = '\0';

    char *response = handle_customer_inquiry(inquiry);
    printf("Response: %s\n", response);

    free(response); // Remember to free the allocated memory

    return 0;
}


//Compilation Instructions
//Compile the module (customer_service.c) and the main program (main.c) separately and then link them together:
gcc -c customer_service.c -o customer_service.o
gcc -c main.c -o main.o
gcc customer_service.o main.o -o customer_service_app -lcurl -lcjson

Explanation:
Separate Compilation:

gcc -c customer_service.c -o customer_service.o: Compiles customer_service.c into an object file (customer_service.o).
gcc -c main.c -o main.o: Compiles main.c into an object file (main.o).
Linking:

//gcc customer_service.o main.o -o customer_service_app -lcurl -lcjson: Links the object files (customer_service.o and main.o) together into an executable (customer_service_app). It also links with libcurl (-lcurl) and cJSON (-lcjson) libraries.
//Considerations:
//Error Handling: Add robust error handling for network requests, JSON parsing, and memory allocation.
//Security: Manage API keys securely and consider encryption for sensitive data transmission.
//Memory Management: Ensure proper memory allocation and deallocation, especially when handling strings and JSON objects.
//This approach encapsulates the functionality into a reusable C module (customer_service.c and customer_service.h), which can be integrated into larger C applications for handling customer inquiries using an NLP service. Adjust the code as per your specific requirements and integrate additional functionalities as needed.






